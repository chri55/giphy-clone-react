{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","e","setState","searchTerm","target","value","handleSubmit","preventDefault","cfg","method","url","params","api_key","process","q","state","limit","searchLimit","axios","then","res","data","gifList","gifs","handleLoadMore","offset","length","colNum","totalCols","start","Math","floor","this","end","slice","console","log","cols","i","push","partitionGifList","className","onSubmit","type","placeholder","onChange","map","col","gif","src","images","original","alt","title","key","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0SA8FeA,G,wDAzFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,aAAe,SAACC,GACd,EAAKC,SAAS,CAACC,WAAWF,EAAEG,OAAOC,SAVlB,EAanBC,aAAe,SAACL,GACdA,EAAEM,iBACF,IAAIC,EAAM,CACRC,OAAO,MACPC,IAAI,uCACJC,OAAQ,CACNC,QAAQC,mCACRC,EAAE,EAAKC,MAAMZ,WACba,MAAM,EAAKD,MAAME,cAGrBC,IAAMV,GAAKW,MAAK,SAAAC,GAAG,OAAIA,EAAIC,KAAKA,QAAMF,MAAK,SAAAG,GAAO,OAAI,EAAKpB,SAAS,CAACqB,KAAMD,QAxB1D,EA2BnBE,eAAiB,SAACvB,GAChBA,EAAEM,iBACF,IAAIC,EAAM,CACRC,OAAQ,MACRC,IAAI,uCACJC,OAAQ,CACNC,QAAQC,mCACRC,EAAE,EAAKC,MAAMZ,WACba,MAAM,EAAKD,MAAME,YACjBQ,OAAO,EAAKV,MAAMQ,KAAKG,OAAO,IAGlCR,IAAMV,GAAKW,MAAK,SAAAC,GAAG,OAAIA,EAAIC,KAAKA,QAAMF,MAAK,SAAAG,GAAO,OAAI,EAAKpB,SAAS,CAACqB,KAAK,GAAD,mBAAM,EAAKR,MAAMQ,MAAjB,YAA0BD,UArCnG,EAAKP,MAAQ,CACXE,YAAa,GACbd,WAAY,GACZoB,KAAM,IALS,E,6DA0CFI,EAAQC,GACvB,IAAMC,EAAQF,EAASG,KAAKC,MAAMC,KAAKjB,MAAMQ,KAAKG,OAASE,GACrDK,EAAMJ,EAAQC,KAAKC,MAAMC,KAAKjB,MAAMQ,KAAKG,OAASE,GACxD,OAAOI,KAAKjB,MAAMQ,KAAKW,MAAML,EAAOI,K,0CAGjB,IAAD,OASlBf,IARU,CACRT,OAAO,MACPC,IAAI,yCACJC,OAAQ,CACNC,QAAQC,mCACRG,MAAM,MAGCG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,KAAKA,QAAMF,MAAK,SAAAG,GAAO,OAAI,EAAKpB,SAAS,CAACqB,KAAMD,OAAWH,MAAK,kBAAMgB,QAAQC,IAAI,EAAKrB,Y,+BAKlH,IADA,IAAIsB,EAAO,GACFC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAKE,KAAKP,KAAKQ,iBAAiBF,EAAG,IAErC,OACE,yBAAKG,UAAU,OACb,0BAAMC,SAAUV,KAAK1B,cACnB,2BAAOqC,KAAK,OAAOC,YAAY,qBAAqBC,SAAUb,KAAKhC,eACnE,2BAAO2C,KAAK,SAAUtC,MAAM,YAE9B,yBAAKoC,UAAU,iBACZJ,EAAKS,KAAI,SAAAC,GAAG,OACX,yBAAKN,UAAU,OACZM,EAAID,KAAI,SAAAE,GAAG,OACV,yBAAKP,UAAU,MAAMQ,IAAG,UAAKD,EAAMA,EAAIE,OAAOC,SAASzC,IAAM,IAAM0C,IAAG,UAAKJ,EAAIK,OAASC,IAAG,UAAKN,EAAIO,cAK5G,0BAAMb,SAAUV,KAAKR,gBACnB,2BAAOmB,KAAK,SAAStC,MAAM,oB,GAlFnBmD,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.bf5362d5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchLimit: 20,\n      searchTerm: \"\",\n      gifs: [],\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({searchTerm:e.target.value});\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    let cfg = {\n      method:'get',\n      url:'https://api.giphy.com/v1/gifs/search',\n      params: {\n        api_key:process.env.REACT_APP_API_KEY,\n        q:this.state.searchTerm,\n        limit:this.state.searchLimit,\n      }\n    }\n    axios(cfg).then(res => res.data.data).then(gifList => this.setState({gifs: gifList}));\n  }\n\n  handleLoadMore = (e) => {\n    e.preventDefault();\n    let cfg = {\n      method: 'get',\n      url:'https://api.giphy.com/v1/gifs/search',\n      params: {\n        api_key:process.env.REACT_APP_API_KEY,\n        q:this.state.searchTerm,\n        limit:this.state.searchLimit,\n        offset:this.state.gifs.length+1,\n      }\n    };\n    axios(cfg).then(res => res.data.data).then(gifList => this.setState({gifs: [...this.state.gifs, ...gifList]}));\n  }\n\n  partitionGifList(colNum, totalCols) {\n    const start = colNum * Math.floor(this.state.gifs.length / totalCols);\n    const end = start + Math.floor(this.state.gifs.length / totalCols);\n    return this.state.gifs.slice(start, end);\n  }\n\n  componentDidMount() {\n    let cfg = {\n      method:'get',\n      url:'https://api.giphy.com/v1/gifs/trending',\n      params: {\n        api_key:process.env.REACT_APP_API_KEY,\n        limit:20,\n      }\n    }\n    axios(cfg).then(res => res.data.data).then(gifList => this.setState({gifs: gifList})).then(() => console.log(this.state));\n  }\n\n  render() {\n    let cols = [];\n    for (let i = 0; i < 4; i ++) {\n      cols.push(this.partitionGifList(i, 4));\n    }\n    return (\n      <div className=\"App\">\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"text\" placeholder=\"Search for gifs...\" onChange={this.handleChange} />\n          <input type=\"submit\"  value=\"Search\"/>\n        </form>\n        <div className=\"col-container\">\n          {cols.map(col => (\n            <div className=\"col\">\n              {col.map(gif => (\n                <img className=\"gif\" src={`${gif ? gif.images.original.url : \"\"}`} alt={`${gif.title}`} key={`${gif.id}`} /> \n              ))}\n            </div>\n          ))}\n        </div>\n        <form onSubmit={this.handleLoadMore}>\n          <input type=\"submit\" value=\"Load More\"/>\n        </form>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}